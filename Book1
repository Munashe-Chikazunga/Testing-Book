"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Utensils, ChefHat, Loader2, AlertCircle } from "lucide-react"
import Image from "next/image"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

interface Recipe {
  id: number
  title: string
  image: string
  missedIngredientCount: number
}

const getRecipes = async (ingredients: string[]): Promise<Recipe[]> => {
  const apiKey = "1344b1c5073d4450907e0fcb12b4ff29" // Provided Spoonacular API key
  const response = await fetch(
    `https://api.spoonacular.com/recipes/findByIngredients?ingredients=${ingredients.join(",")}&number=4&apiKey=${apiKey}`
  )
  if (!response.ok) {
    const errorBody = await response.text()
    throw new Error(`API request failed: ${response.status} ${response.statusText}\n${errorBody}`)
  }
  return response.json()
}

export default function CookingRecipeRecommender() {
  const [ingredients, setIngredients] = useState("")
  const [recipes, setRecipes] = useState<Recipe[] | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError(null)
    const ingredientList = ingredients.split(",").map(i => i.trim()).filter(i => i !== "")
    
    if (ingredientList.length === 0) {
      setError("Please enter at least one ingredient")
      setIsLoading(false)
      return
    }

    try {
      const fetchedRecipes = await getRecipes(ingredientList)
      if (fetchedRecipes.length === 0) {
        setError("No recipes found for the given ingredients. Try adding more ingredients or check for typos.")
      } else {
        setRecipes(fetchedRecipes)
      }
    } catch (err) {
      console.error("Error fetching recipes:", err)
      if (err instanceof Error) {
        if (err.message.includes("API request failed")) {
          setError("Failed to fetch recipes. The recipe service might be temporarily unavailable. Please try again later.")
        } else {
          setError("An unexpected error occurred. Please try again.")
        }
      } else {
        setError("An unknown error occurred. Please try again.")
      }
    } finally {
      setIsLoading(false)
    }
  }

  const handleTryAgain = () => {
    setIngredients("")
    setRecipes(null)
    setError(null)
  }

  return (
    <div className="max-w-4xl mx-auto mt-10 p-6 bg-amber-50 min-h-screen">
      <div className="text-center mb-8">
        <ChefHat className="inline-block text-amber-600 mb-2" size={48} />
        <h1 className="text-3xl font-bold text-amber-800">Culinary Companion</h1>
        <p className="text-amber-700">Discover delicious recipes with ingredients you have!</p>
      </div>

      {/* Top ad space */}
      <div className="mb-8 p-4 bg-white rounded-lg shadow-md text-center">
        <p className="text-gray-500">Advertisement</p>
        {/* Add your ad code here */}
      </div>

      <Card className="bg-white shadow-lg">
        <CardHeader>
          <CardTitle className="text-amber-800">What's in Your Kitchen?</CardTitle>
          <CardDescription>Enter ingredients, separated by commas</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <Input
              type="text"
              value={ingredients}
              onChange={(e) => setIngredients(e.target.value)}
              placeholder="e.g., chicken, tomatoes, onions"
              className="w-full border-amber-300 focus:border-amber-500 focus:ring-amber-500"
            />
            <Button 
              type="submit" 
              className="w-full bg-amber-600 hover:bg-amber-700 text-white"
              disabled={isLoading}
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Finding Recipes...
                </>
              ) : (
                <>
                  <Utensils className="mr-2 h-4 w-4" />
                  Find Recipes
                </>
              )}
            </Button>
          </form>
        </CardContent>
      </Card>

      {error && (
        <Alert variant="destructive" className="mt-6">
          <AlertCircle className="h-4 w-4" />
          <AlertTitle>Error</AlertTitle>
          <AlertDescription>{error}</AlertDescription>
        </Alert>
      )}

      {recipes && recipes.length > 0 && (
        <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
          {recipes.map((recipe, index) => (
            <Card key={recipe.id} className={index === 0 ? "md:col-span-2 bg-white" : "bg-white"}>
              <CardHeader>
                <CardTitle className="text-amber-800 text-lg sm:text-xl md:text-2xl line-clamp-2">
                  {recipe.title}
                </CardTitle>
                <CardDescription>
                  {recipe.missedIngredientCount === 0 
                    ? "You have all the ingredients!" 
                    : `Missing ${recipe.missedIngredientCount} ingredient${recipe.missedIngredientCount > 1 ? 's' : ''}`}
                </CardDescription>
              </CardHeader>
              <CardContent className="flex justify-center">
                <Image 
                  src={recipe.image} 
                  alt={recipe.title} 
                  width={300} 
                  height={200} 
                  className="rounded-md shadow-md"
                />
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {(recipes || error) && (
        <div className="mt-6 text-center">
          <Button onClick={handleTryAgain} className="bg-amber-600 hover:bg-amber-700 text-white">
            Try Different Ingredients
          </Button>
        </div>
      )}

      {/* Bottom ad space */}
      <div className="mt-8 p-4 bg-white rounded-lg shadow-md text-center">
        <p className="text-gray-500">Advertisement</p>
        {/* Add your ad code here */}
      </div>
    </div>
  )
}  
